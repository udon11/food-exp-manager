#!/usr/bin/env node

/**
 * 賞味期限が過ぎているItemを通知する
 */
const config = require('config');
const moment = require('moment');
const Request = require('superagent');
const cron = require('cron').CronJob;
const Item = require('../model/schema/item');
const logger = require('../util/logger/systemLogger');

function processStop(message) {
    logger.info(message);
    process.exit();
}

const job = new cron({
    cronTime: config.notice.cronTime,
    start: false,
    timeZone: 'Asia/Tokyo',
    onTick: () => {
        logger.info('処理開始');

        Item.find({expirationDate: {$lte: moment().unix()}}, (err, docs) => {
            if (err) {
                logger.error(err);
                throw new Error('get item error.');
            }

            // 0件なら何もしない
            if (docs.length == 0) {
                processStop('賞味期限切れは0件');
            }

            logger.info('賞味期限切れは' + docs.length + '件');

            /*
             * 通知文の組み立て
             */
            let body = {
                value1: config.notice.prefix
            };
            docs.map((doc) => {
                doc.expirationDate = moment.unix(doc.expirationDate).format('MM/DD');
                body.value1 += doc.name + ' ' + moment.unix(doc.expirationDate).format('YYYY/MM/DD') + 'まで<br>';
            });
            body.value1 += config.notice.suffix;

            /*
             * 通知実行
             */
            Request
                .post(config.ifttt.url)
                .type('json')
                .send(body)
                .end((err, res) => {
                    if (err) {
                        logger.error(err);
                        throw new Error(err);
                    }
                    if (res.statusCode != 200) {
                        logger.error(res);
                        throw new Error(res);
                    }

                    /*
                     * プロセス終了
                     */
                    processStop('通知完了');
                });
        });
    }
});
job.start();
